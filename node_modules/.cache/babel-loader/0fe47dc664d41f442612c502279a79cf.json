{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, REDIRECTED, LOGOUT_SUCCESS } from './actionTypes';\nimport { beginAjax, endAjax } from './ajaxStatusActions';\nimport { login, register } from '../api/remote';\nimport errorHandler from '../utils/errorHandler';\n\nfunction registerSuccess() {\n  return {\n    type: REGISTER_SUCCESS\n  };\n}\n\nfunction registerError(error) {\n  return {\n    type: REGISTER_ERROR,\n    error\n  };\n}\n\nfunction loginSuccess() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nfunction loginError(error) {\n  return {\n    type: LOGIN_ERROR,\n    error\n  };\n}\n\nfunction redirectAction() {\n  return {\n    type: REDIRECTED\n  };\n}\n\nfunction logoutSuccess() {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}\n\nfunction registerAction(username, email, password) {\n  return dispatch => {\n    dispatch(beginAjax());\n    return register(username, email, password).then(json => {\n      if (json.success) {\n        dispatch(registerSuccess());\n      } else {\n        const error = errorHandler(json);\n        dispatch(registerError(error));\n      }\n\n      dispatch(endAjax());\n    });\n  };\n}\n\nfunction loginAction(email, password) {\n  return dispatch => {\n    dispatch(beginAjax());\n    return login(email, password).then(json => {\n      if (json.success) {\n        authenticateUser(json);\n        dispatch(loginSuccess());\n      } else {\n        const error = errorHandler(json);\n        dispatch(loginError(error));\n      }\n\n      dispatch(endAjax());\n    });\n  };\n}\n\nfunction logoutAction() {\n  return dispatch => {\n    deauthenticateUser();\n    dispatch(logoutSuccess());\n  };\n}\n\nfunction authenticateUser(json) {\n  window.localStorage.setItem('authToken', json.token);\n  window.localStorage.setItem('username', json.user.username);\n\n  if (json.user.roles && json.user.roles.length > 0) {\n    window.localStorage.setItem('roles', json.user.roles);\n  }\n}\n\nfunction deauthenticateUser() {\n  window.localStorage.clear();\n}\n\nexport { registerAction, loginAction, logoutAction, redirectAction };","map":{"version":3,"sources":["/home/geezer/projects/pizzeria/pizzeria-react-app/src/actions/authActions.js"],"names":["REGISTER_SUCCESS","REGISTER_ERROR","LOGIN_SUCCESS","LOGIN_ERROR","REDIRECTED","LOGOUT_SUCCESS","beginAjax","endAjax","login","register","errorHandler","registerSuccess","type","registerError","error","loginSuccess","loginError","redirectAction","logoutSuccess","registerAction","username","email","password","dispatch","then","json","success","loginAction","authenticateUser","logoutAction","deauthenticateUser","window","localStorage","setItem","token","user","roles","length","clear"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,cAA3B,EAA2CC,aAA3C,EAA0DC,WAA1D,EAAuEC,UAAvE,EAAmFC,cAAnF,QAAyG,eAAzG;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,qBAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,eAAhC;AACA,OAAOC,YAAP,MAAyB,uBAAzB;;AAEA,SAASC,eAAT,GAA4B;AAC1B,SAAO;AACLC,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD;;AAED,SAASa,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAO;AACLF,IAAAA,IAAI,EAAEX,cADD;AAELa,IAAAA;AAFK,GAAP;AAID;;AAED,SAASC,YAAT,GAAyB;AACvB,SAAO;AACLH,IAAAA,IAAI,EAAEV;AADD,GAAP;AAGD;;AAED,SAASc,UAAT,CAAqBF,KAArB,EAA4B;AAC1B,SAAO;AACLF,IAAAA,IAAI,EAAET,WADD;AAELW,IAAAA;AAFK,GAAP;AAID;;AAED,SAASG,cAAT,GAA2B;AACzB,SAAO;AACLL,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD;;AAED,SAASc,aAAT,GAA0B;AACxB,SAAO;AACLN,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD;;AAED,SAASc,cAAT,CAAyBC,QAAzB,EAAmCC,KAAnC,EAA0CC,QAA1C,EAAoD;AAClD,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AACA,WAAOG,QAAQ,CAACW,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,CAAR,CACJE,IADI,CACCC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,OAAT,EAAkB;AAChBH,QAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;AACD,OAFD,MAEO;AACL,cAAMG,KAAK,GAAGJ,YAAY,CAACe,IAAD,CAA1B;AACAF,QAAAA,QAAQ,CAACV,aAAa,CAACC,KAAD,CAAd,CAAR;AACD;;AACDS,MAAAA,QAAQ,CAAChB,OAAO,EAAR,CAAR;AACD,KATI,CAAP;AAUD,GAZD;AAaD;;AAED,SAASoB,WAAT,CAAsBN,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AACA,WAAOE,KAAK,CAACa,KAAD,EAAQC,QAAR,CAAL,CACJE,IADI,CACCC,IAAI,IAAI;AACZ,UAAIA,IAAI,CAACC,OAAT,EAAkB;AAChBE,QAAAA,gBAAgB,CAACH,IAAD,CAAhB;AACAF,QAAAA,QAAQ,CAACR,YAAY,EAAb,CAAR;AACD,OAHD,MAGO;AACL,cAAMD,KAAK,GAAGJ,YAAY,CAACe,IAAD,CAA1B;AACAF,QAAAA,QAAQ,CAACP,UAAU,CAACF,KAAD,CAAX,CAAR;AACD;;AACDS,MAAAA,QAAQ,CAAChB,OAAO,EAAR,CAAR;AACD,KAVI,CAAP;AAWD,GAbD;AAcD;;AAED,SAASsB,YAAT,GAAyB;AACvB,SAAQN,QAAD,IAAc;AACnBO,IAAAA,kBAAkB;AAClBP,IAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACD,GAHD;AAID;;AAED,SAASU,gBAAT,CAA2BH,IAA3B,EAAiC;AAC/BM,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAyCR,IAAI,CAACS,KAA9C;AACAH,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCR,IAAI,CAACU,IAAL,CAAUf,QAAlD;;AACA,MAAIK,IAAI,CAACU,IAAL,CAAUC,KAAV,IAAmBX,IAAI,CAACU,IAAL,CAAUC,KAAV,CAAgBC,MAAhB,GAAyB,CAAhD,EAAmD;AACjDN,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCR,IAAI,CAACU,IAAL,CAAUC,KAA/C;AACD;AACF;;AAED,SAASN,kBAAT,GAA+B;AAC7BC,EAAAA,MAAM,CAACC,YAAP,CAAoBM,KAApB;AACD;;AAED,SACEnB,cADF,EAEEQ,WAFF,EAGEE,YAHF,EAIEZ,cAJF","sourcesContent":["import { REGISTER_SUCCESS, REGISTER_ERROR, LOGIN_SUCCESS, LOGIN_ERROR, REDIRECTED, LOGOUT_SUCCESS } from './actionTypes'\nimport {beginAjax, endAjax} from './ajaxStatusActions'\nimport { login, register } from '../api/remote'\nimport errorHandler from '../utils/errorHandler'\n\nfunction registerSuccess () {\n  return {\n    type: REGISTER_SUCCESS\n  }\n}\n\nfunction registerError (error) {\n  return {\n    type: REGISTER_ERROR,\n    error\n  }\n}\n\nfunction loginSuccess () {\n  return {\n    type: LOGIN_SUCCESS\n  }\n}\n\nfunction loginError (error) {\n  return {\n    type: LOGIN_ERROR,\n    error\n  }\n}\n\nfunction redirectAction () {\n  return {\n    type: REDIRECTED\n  }\n}\n\nfunction logoutSuccess () {\n  return {\n    type: LOGOUT_SUCCESS\n  }\n}\n\nfunction registerAction (username, email, password) {\n  return (dispatch) => {\n    dispatch(beginAjax())\n    return register(username, email, password)\n      .then(json => {\n        if (json.success) {\n          dispatch(registerSuccess())\n        } else {\n          const error = errorHandler(json)\n          dispatch(registerError(error))\n        }\n        dispatch(endAjax())\n      })\n  }\n}\n\nfunction loginAction (email, password) {\n  return (dispatch) => {\n    dispatch(beginAjax())\n    return login(email, password)\n      .then(json => {\n        if (json.success) {\n          authenticateUser(json)\n          dispatch(loginSuccess())\n        } else {\n          const error = errorHandler(json)\n          dispatch(loginError(error))\n        }\n        dispatch(endAjax())\n      })\n  }\n}\n\nfunction logoutAction () {\n  return (dispatch) => {\n    deauthenticateUser()\n    dispatch(logoutSuccess())\n  }\n}\n\nfunction authenticateUser (json) {\n  window.localStorage.setItem('authToken', json.token)\n  window.localStorage.setItem('username', json.user.username)\n  if (json.user.roles && json.user.roles.length > 0) {\n    window.localStorage.setItem('roles', json.user.roles)\n  }\n}\n\nfunction deauthenticateUser () {\n  window.localStorage.clear()\n}\n\nexport {\n  registerAction,\n  loginAction,\n  logoutAction,\n  redirectAction\n}\n"]},"metadata":{},"sourceType":"module"}