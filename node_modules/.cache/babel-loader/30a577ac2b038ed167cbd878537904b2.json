{"ast":null,"code":"import { SUBMIT_ORDER, FETCH_USER_ORDERS, FETCH_PENDING_ORDERS, APPROVED_ORDER, LOGOUT_SUCCESS } from '../actions/actionTypes';\n\nfunction userOrdersReducer(state = [], action) {\n  switch (action.type) {\n    case FETCH_USER_ORDERS:\n      return reconcile(state, action.orders);\n\n    case SUBMIT_ORDER:\n      return reconcile(state, [action.order]);\n\n    case LOGOUT_SUCCESS:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nfunction pendingOrdersReducer(state = [], action) {\n  switch (action.type) {\n    case FETCH_PENDING_ORDERS:\n      return reconcile(state, action.orders);\n\n    case APPROVED_ORDER:\n      return state.filter(o => o._id !== action.id);\n\n    case LOGOUT_SUCCESS:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nfunction reconcile(oldData, newData) {\n  const newDataById = {};\n\n  for (const entry of newData) {\n    newDataById[entry._id] = entry;\n  }\n\n  const result = [];\n\n  for (const entry of oldData) {\n    if (newDataById[entry._id]) {\n      result.push(newDataById[entry._id]);\n      delete newDataById[entry._id];\n    } else {\n      result.push(entry);\n    }\n  }\n\n  for (const entryId in newDataById) {\n    result.push(newDataById[entryId]);\n  }\n\n  return result;\n}\n\nexport { userOrdersReducer, pendingOrdersReducer };","map":{"version":3,"sources":["/home/geezer/projects/pizzeria/pizzeria-react-app/src/reducers/ordersReducer.js"],"names":["SUBMIT_ORDER","FETCH_USER_ORDERS","FETCH_PENDING_ORDERS","APPROVED_ORDER","LOGOUT_SUCCESS","userOrdersReducer","state","action","type","reconcile","orders","order","pendingOrdersReducer","filter","o","_id","id","oldData","newData","newDataById","entry","result","push","entryId"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,iBAAtB,EAAyCC,oBAAzC,EAA+DC,cAA/D,EAA+EC,cAA/E,QAAoG,wBAApG;;AAEA,SAASC,iBAAT,CAA4BC,KAAK,GAAG,EAApC,EAAwCC,MAAxC,EAAgD;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,iBAAL;AACE,aAAOQ,SAAS,CAACH,KAAD,EAAQC,MAAM,CAACG,MAAf,CAAhB;;AACF,SAAKV,YAAL;AACE,aAAOS,SAAS,CAACH,KAAD,EAAQ,CAACC,MAAM,CAACI,KAAR,CAAR,CAAhB;;AACF,SAAKP,cAAL;AACE,aAAO,EAAP;;AACF;AACE,aAAOE,KAAP;AARJ;AAUD;;AAED,SAASM,oBAAT,CAA+BN,KAAK,GAAG,EAAvC,EAA2CC,MAA3C,EAAmD;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,oBAAL;AACE,aAAOO,SAAS,CAACH,KAAD,EAAQC,MAAM,CAACG,MAAf,CAAhB;;AACF,SAAKP,cAAL;AACE,aAAOG,KAAK,CAACO,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUR,MAAM,CAACS,EAAnC,CAAP;;AACF,SAAKZ,cAAL;AACE,aAAO,EAAP;;AACF;AACE,aAAOE,KAAP;AARJ;AAUD;;AAED,SAASG,SAAT,CAAoBQ,OAApB,EAA6BC,OAA7B,EAAsC;AACpC,QAAMC,WAAW,GAAG,EAApB;;AACA,OAAK,MAAMC,KAAX,IAAoBF,OAApB,EAA6B;AAC3BC,IAAAA,WAAW,CAACC,KAAK,CAACL,GAAP,CAAX,GAAyBK,KAAzB;AACD;;AAED,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMD,KAAX,IAAoBH,OAApB,EAA6B;AAC3B,QAAIE,WAAW,CAACC,KAAK,CAACL,GAAP,CAAf,EAA4B;AAC1BM,MAAAA,MAAM,CAACC,IAAP,CAAYH,WAAW,CAACC,KAAK,CAACL,GAAP,CAAvB;AACA,aAAOI,WAAW,CAACC,KAAK,CAACL,GAAP,CAAlB;AACD,KAHD,MAGO;AACLM,MAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ;AACD;AACF;;AAED,OAAK,MAAMG,OAAX,IAAsBJ,WAAtB,EAAmC;AACjCE,IAAAA,MAAM,CAACC,IAAP,CAAYH,WAAW,CAACI,OAAD,CAAvB;AACD;;AAED,SAAOF,MAAP;AACD;;AAED,SACEhB,iBADF,EAEEO,oBAFF","sourcesContent":["import {SUBMIT_ORDER, FETCH_USER_ORDERS, FETCH_PENDING_ORDERS, APPROVED_ORDER, LOGOUT_SUCCESS} from '../actions/actionTypes'\n\nfunction userOrdersReducer (state = [], action) {\n  switch (action.type) {\n    case FETCH_USER_ORDERS:\n      return reconcile(state, action.orders)\n    case SUBMIT_ORDER:\n      return reconcile(state, [action.order])\n    case LOGOUT_SUCCESS:\n      return []\n    default:\n      return state\n  }\n}\n\nfunction pendingOrdersReducer (state = [], action) {\n  switch (action.type) {\n    case FETCH_PENDING_ORDERS:\n      return reconcile(state, action.orders)\n    case APPROVED_ORDER:\n      return state.filter(o => o._id !== action.id)\n    case LOGOUT_SUCCESS:\n      return []\n    default:\n      return state\n  }\n}\n\nfunction reconcile (oldData, newData) {\n  const newDataById = {}\n  for (const entry of newData) {\n    newDataById[entry._id] = entry\n  }\n\n  const result = []\n  for (const entry of oldData) {\n    if (newDataById[entry._id]) {\n      result.push(newDataById[entry._id])\n      delete newDataById[entry._id]\n    } else {\n      result.push(entry)\n    }\n  }\n\n  for (const entryId in newDataById) {\n    result.push(newDataById[entryId])\n  }\n\n  return result\n}\n\nexport {\n  userOrdersReducer,\n  pendingOrdersReducer\n}\n"]},"metadata":{},"sourceType":"module"}