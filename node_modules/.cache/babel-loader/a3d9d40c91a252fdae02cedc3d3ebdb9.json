{"ast":null,"code":"import { FETCH_DATA_SUCCESS, CREATE_PIZZA_SUCCESS, CREATE_PIZZA_ERROR, EDIT_PIZZA_SUCCESS, EDIT_PIZZA_ERROR, REDIRECTED, CREATE_REVIEW_SUCCESS, CREATE_REVIEW_ERROR, LIKE_PRODUCT, UNLIKE_PRODUCT, DELETE_PIZZA } from '../actions/actionTypes';\n\nfunction productsReducer(state = [], action) {\n  switch (action.type) {\n    case FETCH_DATA_SUCCESS:\n      return reconcile(state, action.data);\n\n    case CREATE_PIZZA_SUCCESS:\n      return reconcile(state, [action.data]);\n\n    case EDIT_PIZZA_SUCCESS:\n      return reconcile(state, [action.data]);\n\n    case CREATE_REVIEW_SUCCESS:\n      return reconcile(state, [action.data]);\n\n    case LIKE_PRODUCT:\n      return reconcile(state, [action.data]);\n\n    case UNLIKE_PRODUCT:\n      return reconcile(state, [action.data]);\n\n    case DELETE_PIZZA:\n      return state.filter(e => e._id !== action.id);\n\n    default:\n      return state;\n  }\n}\n\nfunction createProductReducer(state = {\n  success: false\n}, action) {\n  switch (action.type) {\n    case CREATE_PIZZA_SUCCESS:\n      return Object.assign({}, state, {\n        success: true\n      });\n\n    case REDIRECTED:\n      return Object.assign({}, state, {\n        success: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction createProductErrorReducer(state = {\n  hasError: false,\n  message: ''\n}, action) {\n  switch (action.type) {\n    case CREATE_PIZZA_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        message: action.error\n      });\n\n    case CREATE_PIZZA_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        message: ''\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction editProductReducer(state = {\n  success: false\n}, action) {\n  switch (action.type) {\n    case EDIT_PIZZA_SUCCESS:\n      return Object.assign({}, state, {\n        success: true\n      });\n\n    case REDIRECTED:\n      return Object.assign({}, state, {\n        success: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction editProductErrorReducer(state = {\n  hasError: false,\n  message: ''\n}, action) {\n  switch (action.type) {\n    case EDIT_PIZZA_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        message: action.error\n      });\n\n    case EDIT_PIZZA_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        message: ''\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction createReviewErrorReducer(state = {\n  hasError: false,\n  message: ''\n}, action) {\n  switch (action.type) {\n    case CREATE_REVIEW_ERROR:\n      return Object.assign({}, state, {\n        hasError: true,\n        message: action.error\n      });\n\n    case CREATE_REVIEW_SUCCESS:\n      return Object.assign({}, state, {\n        hasError: false,\n        message: ''\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction reconcile(oldData, newData) {\n  const newDataById = {};\n\n  for (const entry of newData) {\n    newDataById[entry._id] = entry;\n  }\n\n  const result = [];\n\n  for (const entry of oldData) {\n    if (newDataById[entry._id]) {\n      result.push(newDataById[entry._id]);\n      delete newDataById[entry._id];\n    } else {\n      result.push(entry);\n    }\n  }\n\n  for (const entryId in newDataById) {\n    result.push(newDataById[entryId]);\n  }\n\n  return result;\n}\n\nexport { productsReducer, createProductReducer, createProductErrorReducer, editProductReducer, editProductErrorReducer, createReviewErrorReducer };","map":{"version":3,"sources":["/home/geezer/projects/pizzeria/pizzeria-react-app/src/reducers/productsReducer.js"],"names":["FETCH_DATA_SUCCESS","CREATE_PIZZA_SUCCESS","CREATE_PIZZA_ERROR","EDIT_PIZZA_SUCCESS","EDIT_PIZZA_ERROR","REDIRECTED","CREATE_REVIEW_SUCCESS","CREATE_REVIEW_ERROR","LIKE_PRODUCT","UNLIKE_PRODUCT","DELETE_PIZZA","productsReducer","state","action","type","reconcile","data","filter","e","_id","id","createProductReducer","success","Object","assign","createProductErrorReducer","hasError","message","error","editProductReducer","editProductErrorReducer","createReviewErrorReducer","oldData","newData","newDataById","entry","result","push","entryId"],"mappings":"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","sourcesContent":["import {FETCH_DATA_SUCCESS, CREATE_PIZZA_SUCCESS, CREATE_PIZZA_ERROR, EDIT_PIZZA_SUCCESS, EDIT_PIZZA_ERROR,\n  REDIRECTED, CREATE_REVIEW_SUCCESS, CREATE_REVIEW_ERROR, LIKE_PRODUCT, UNLIKE_PRODUCT, DELETE_PIZZA} from '../actions/actionTypes'\n\nfunction productsReducer (state = [], action) {\n  switch (action.type) {\n    case FETCH_DATA_SUCCESS:\n      return reconcile(state, action.data)\n    case CREATE_PIZZA_SUCCESS:\n      return reconcile(state, [action.data])\n    case EDIT_PIZZA_SUCCESS:\n      return reconcile(state, [action.data])\n    case CREATE_REVIEW_SUCCESS:\n      return reconcile(state, [action.data])\n    case LIKE_PRODUCT:\n      return reconcile(state, [action.data])\n    case UNLIKE_PRODUCT:\n      return reconcile(state, [action.data])\n    case DELETE_PIZZA:\n      return state.filter(e => e._id !== action.id)\n    default:\n      return state\n  }\n}\n\nfunction createProductReducer (state = {success: false}, action) {\n  switch (action.type) {\n    case CREATE_PIZZA_SUCCESS:\n      return Object.assign({}, state, {success: true})\n    case REDIRECTED:\n      return Object.assign({}, state, {success: false})\n    default:\n      return state\n  }\n}\n\nfunction createProductErrorReducer (state = {hasError: false, message: ''}, action) {\n  switch (action.type) {\n    case CREATE_PIZZA_ERROR:\n      return Object.assign({}, state, {hasError: true, message: action.error})\n    case CREATE_PIZZA_SUCCESS:\n      return Object.assign({}, state, {hasError: false, message: ''})\n    default:\n      return state\n  }\n}\n\nfunction editProductReducer (state = {success: false}, action) {\n  switch (action.type) {\n    case EDIT_PIZZA_SUCCESS:\n      return Object.assign({}, state, {success: true})\n    case REDIRECTED:\n      return Object.assign({}, state, {success: false})\n    default:\n      return state\n  }\n}\n\nfunction editProductErrorReducer (state = {hasError: false, message: ''}, action) {\n  switch (action.type) {\n    case EDIT_PIZZA_ERROR:\n      return Object.assign({}, state, {hasError: true, message: action.error})\n    case EDIT_PIZZA_SUCCESS:\n      return Object.assign({}, state, {hasError: false, message: ''})\n    default:\n      return state\n  }\n}\n\nfunction createReviewErrorReducer (state = {hasError: false, message: ''}, action) {\n  switch (action.type) {\n    case CREATE_REVIEW_ERROR:\n      return Object.assign({}, state, {hasError: true, message: action.error})\n    case CREATE_REVIEW_SUCCESS:\n      return Object.assign({}, state, {hasError: false, message: ''})\n    default:\n      return state\n  }\n}\n\nfunction reconcile (oldData, newData) {\n  const newDataById = {}\n  for (const entry of newData) {\n    newDataById[entry._id] = entry\n  }\n\n  const result = []\n  for (const entry of oldData) {\n    if (newDataById[entry._id]) {\n      result.push(newDataById[entry._id])\n      delete newDataById[entry._id]\n    } else {\n      result.push(entry)\n    }\n  }\n\n  for (const entryId in newDataById) {\n    result.push(newDataById[entryId])\n  }\n\n  return result\n}\n\nexport {\n  productsReducer,\n  createProductReducer,\n  createProductErrorReducer,\n  editProductReducer,\n  editProductErrorReducer,\n  createReviewErrorReducer\n}\n"]},"metadata":{},"sourceType":"module"}